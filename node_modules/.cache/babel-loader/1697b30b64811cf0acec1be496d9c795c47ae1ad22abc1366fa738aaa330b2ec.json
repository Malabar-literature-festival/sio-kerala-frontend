{"ast":null,"code":"var _jsxFileName = \"/Users/azharpallikkandy/Documents/projects/DataHex/dfms/dfms-admin/src/components/elements/captcha/index.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport FormInput from \"../input\";\nimport { Canvas, CpatchaContainer } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Captcha = _ref => {\n  _s();\n  let {\n    setCaptchaStatus,\n    label,\n    error\n  } = _ref;\n  const canvasRef = useRef(null);\n  const [captchaCode, setCaptchaCode] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n  useEffect(() => {\n    // generate a random string of 6 characters\n    const code = generateCaptchaCode(6);\n    setCaptchaCode(code);\n    drawCaptchaCode(code);\n  }, []);\n  function generateCaptchaCode(length) {\n    // generate a random string of alphanumeric characters\n    const characters = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let code = \"\";\n    for (let i = 0; i < length; i++) {\n      const randomIndex = Math.floor(Math.random() * characters.length);\n      code += characters[randomIndex];\n    }\n    return code;\n  }\n  function drawCaptchaCode(code) {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    // draw a solid color background\n    context.fillStyle = \"#ffff\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n\n    // draw the captcha code in a random font and size\n    const fontSize = Math.floor(Math.random() * 20) + 20;\n    const font = `bold ${fontSize}px Arial`;\n    context.font = font;\n    context.fillStyle = \"black\";\n    context.textAlign = \"center\";\n    context.textBaseline = \"middle\";\n    context.fillText(code, canvas.width / 2, canvas.height / 2);\n  }\n  function onCaptchEntered(e, id) {\n    validate(e.target.value);\n  }\n  const validate = code => {\n    if (code === captchaCode) {\n      setCaptchaStatus(true);\n    } else {\n      setCaptchaStatus(false);\n    }\n    setUserInput(code);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CpatchaContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Canvas, {\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          title: \"Cick here to update the Captcha\",\n          onClick: () => {\n            const code = generateCaptchaCode(6);\n            setCaptchaCode(code);\n            drawCaptchaCode(code);\n            setCaptchaStatus(false);\n          },\n          ref: canvasRef,\n          width: 150,\n          height: 50,\n          style: {\n            background: \"transperant\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        error: error,\n        placeholder: label,\n        id: 1,\n        label: label,\n        value: userInput,\n        type: \"text\",\n        onChange: onCaptchEntered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Captcha, \"q4iQkMGybXH7RFbXwIvElKcCfnQ=\");\n_c = Captcha;\nexport default Captcha;\nvar _c;\n$RefreshReg$(_c, \"Captcha\");","map":{"version":3,"names":["useState","useEffect","useRef","FormInput","Canvas","CpatchaContainer","Captcha","setCaptchaStatus","label","error","canvasRef","captchaCode","setCaptchaCode","userInput","setUserInput","code","generateCaptchaCode","drawCaptchaCode","length","characters","i","randomIndex","Math","floor","random","canvas","current","context","getContext","fillStyle","fillRect","width","height","fontSize","font","textAlign","textBaseline","fillText","onCaptchEntered","e","id","validate","target","value","background"],"sources":["/Users/azharpallikkandy/Documents/projects/DataHex/dfms/dfms-admin/src/components/elements/captcha/index.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport FormInput from \"../input\";\nimport { Canvas, CpatchaContainer } from \"./styles\";\n\nconst Captcha = ({ setCaptchaStatus, label, error }) => {\n  const canvasRef = useRef(null);\n  const [captchaCode, setCaptchaCode] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n  useEffect(() => {\n    // generate a random string of 6 characters\n    const code = generateCaptchaCode(6);\n    setCaptchaCode(code);\n    drawCaptchaCode(code);\n  }, []);\n\n  function generateCaptchaCode(length) {\n    // generate a random string of alphanumeric characters\n    const characters = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let code = \"\";\n    for (let i = 0; i < length; i++) {\n      const randomIndex = Math.floor(Math.random() * characters.length);\n      code += characters[randomIndex];\n    }\n    return code;\n  }\n\n  function drawCaptchaCode(code) {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    // draw a solid color background\n    context.fillStyle = \"#ffff\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n\n    // draw the captcha code in a random font and size\n    const fontSize = Math.floor(Math.random() * 20) + 20;\n    const font = `bold ${fontSize}px Arial`;\n    context.font = font;\n    context.fillStyle = \"black\";\n    context.textAlign = \"center\";\n    context.textBaseline = \"middle\";\n    context.fillText(code, canvas.width / 2, canvas.height / 2);\n  }\n\n  function onCaptchEntered(e, id) {\n    validate(e.target.value);\n  }\n  const validate = (code) => {\n    if (code === captchaCode) {\n      setCaptchaStatus(true);\n    } else {\n      setCaptchaStatus(false);\n    }\n    setUserInput(code);\n  };\n\n  return (\n    <>\n      <CpatchaContainer>\n        <Canvas>\n          <canvas\n            title=\"Cick here to update the Captcha\"\n            onClick={() => {\n              const code = generateCaptchaCode(6);\n              setCaptchaCode(code);\n              drawCaptchaCode(code);\n              setCaptchaStatus(false);\n            }}\n            ref={canvasRef}\n            width={150}\n            height={50}\n            style={{ background: \"transperant\" }}\n          />\n        </Canvas>\n        <FormInput error={error} placeholder={label} id={1} label={label} value={userInput} type=\"text\" onChange={onCaptchEntered} />\n      </CpatchaContainer>\n    </>\n  );\n};\nexport default Captcha;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}